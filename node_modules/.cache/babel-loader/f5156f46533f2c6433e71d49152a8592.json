{"ast":null,"code":"var _jsxFileName = \"/Users/danielle/Documents/lambda-GIT/gwg/src/dashboardscreen.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n/*\nScreen:LoginScreen\nLoginscreen is the main screen which the user is shown on first visit to page and after\nhitting logout\n*/\n\nimport LoginScreen from './loginscreen';\n/*\nModule:Material-UI\nMaterial-UI is used for designing ui of the app\n*/\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\n/*import Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport AppBar from 'material-ui/AppBar';\n*/\n\nimport FontIcon from 'material-ui/FontIcon';\nimport { blue500, red500, greenA200 } from 'material-ui/styles/colors';\nimport Dropzone from 'react-dropzone';\nvar apiBaseUrl = \"https://random-acts0519.herokuapp.com/\";\n/*\nModule:Dropzone\nDropzone is used for local file selection\n*/\n\n/*\nModule:superagent\nsuperagent is used to handle post/get requests to server\n*/\n\nvar request = require('superagent');\n\nclass DashboardScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      role: 'student',\n      filesPreview: [],\n      filesToBeSent: [],\n      draweropen: false,\n      printcount: 10,\n      printingmessage: '',\n      printButtonDisabled: false\n    };\n  }\n\n  componentWillMount() {\n    // console.log(\"prop values\",this.props.role);\n    var printcount; //set upload limit based on user role\n\n    if (this.props.role) {\n      if (this.props.role == 'student') {\n        printcount = 5;\n      } else if (this.props.role == 'teacher') {\n        printcount = 10;\n      }\n    }\n\n    this.setState({\n      printcount,\n      role: this.props.role\n    });\n  }\n  /*\n  Function:handleCloseClick\n  Parameters: event,index\n  Usage:This fxn is used to remove file from filesPreview div\n  if user clicks close icon adjacent to selected file\n  */\n\n\n  handleCloseClick(event, index) {\n    // console.log(\"filename\",index);\n    var filesToBeSent = this.state.filesToBeSent;\n    filesToBeSent.splice(index, 1); // console.log(\"files\",filesToBeSent);\n\n    var filesPreview = [];\n\n    for (var i in filesToBeSent) {\n      filesPreview.push(React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(FontIcon, {\n        className: \"material-icons customstyle\",\n        color: blue500,\n        onClick: event => this.handleCloseClick(event, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"clear\")))));\n    }\n\n    this.setState({\n      filesToBeSent,\n      filesPreview\n    });\n  }\n  /*\n  Function:onDrop\n  Parameters: acceptedFiles, rejectedFiles\n  Usage:This fxn is default event handler of react drop-Dropzone\n  which is modified to update filesPreview div\n  */\n\n\n  onDrop(acceptedFiles, rejectedFiles) {\n    // console.log('Accepted files: ', acceptedFiles[0].name);\n    var filesToBeSent = this.state.filesToBeSent;\n\n    if (filesToBeSent.length < this.state.printcount) {\n      filesToBeSent.push(acceptedFiles);\n      var filesPreview = [];\n\n      for (var i in filesToBeSent) {\n        filesPreview.push(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(FontIcon, {\n          className: \"material-icons customstyle\",\n          color: blue500,\n          styles: {\n            top: 10\n          },\n          onClick: event => this.handleCloseClick(event, i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"clear\")))));\n      }\n\n      this.setState({\n        filesToBeSent,\n        filesPreview\n      });\n    } else {\n      alert(\"You have reached the limit of printing files at a time\");\n    } // console.log('Rejected files: ', rejectedFiles);\n\n  }\n  /*\n    Function:handleClick\n    Parameters: event\n    Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\n    to backend\n  */\n\n\n  handleClick(event) {\n    // console.log(\"handleClick\",event);\n    this.setState({\n      printingmessage: \"Please wait until your files are being printed\",\n      printButtonDisabled: true\n    });\n    var self = this;\n\n    if (this.state.filesToBeSent.length > 0) {\n      var filesArray = this.state.filesToBeSent;\n      var req = request.post(apiBaseUrl + 'fileprint');\n\n      for (var i in filesArray) {\n        // console.log(\"files\",filesArray[i][0]);\n        req.attach(filesArray[i][0].name, filesArray[i][0]);\n      }\n\n      req.end(function (err, res) {\n        if (err) {\n          console.log(\"error ocurred\");\n        }\n\n        console.log(\"res\", res);\n        self.setState({\n          printingmessage: '',\n          printButtonDisabled: false,\n          filesToBeSent: [],\n          filesPreview: []\n        });\n        alert(\"File printing completed\"); // self.props.indexthis.switchPage();\n      });\n    } else {\n      alert(\"Please upload some files first\");\n    }\n  }\n  /*\n    Function:toggleDrawer\n    Parameters: event\n    Usage:This fxn is used to toggle drawer state\n    */\n\n\n  toggleDrawer(event) {\n    // console.log(\"drawer click\");\n    this.setState({\n      draweropen: !this.state.draweropen\n    });\n  }\n  /*\n    Function:toggleDrawer\n    Parameters: event\n    Usage:This fxn is used to close the drawer when user clicks anywhere on the \n    main div\n    */\n\n\n  handleDivClick(event) {\n    // console.log(\"event\",event);\n    if (this.state.draweropen) {\n      this.setState({\n        draweropen: false\n      });\n    }\n  }\n  /*\n    Function:handleLogout\n    Parameters: event\n    Usage:This fxn is used to end user session and redirect the user back to login page\n    */\n\n\n  handleLogout(event) {\n    // console.log(\"logout event fired\",this.props);\n    var loginPage = [];\n    loginPage.push(React.createElement(LoginScreen, {\n      appContext: this.props.appContext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }));\n    this.props.appContext.setState({\n      loginPage: loginPage,\n      dashboardScreen: []\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: event => this.handleDivClick(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"You can print upto \", this.state.printcount, \" files at a time since you are \", this.state.role), React.createElement(Dropzone, {\n      onDrop: files => this.onDrop(files),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Try dropping some files here, or click to select files to upload.\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Files to be printed are:\", this.state.filesPreview)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.state.printingmessage), React.createElement(MuiThemeProvider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(RaisedButton, {\n      disabled: this.state.printButtonDisabled,\n      label: \"Print Files\",\n      primary: true,\n      style: style,\n      onClick: event => this.handleClick(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst style = {\n  margin: 15\n};\nexport default DashboardScreen;","map":{"version":3,"sources":["/Users/danielle/Documents/lambda-GIT/gwg/src/dashboardscreen.js"],"names":["React","Component","LoginScreen","MuiThemeProvider","RaisedButton","FontIcon","blue500","red500","greenA200","Dropzone","apiBaseUrl","request","require","DashboardScreen","constructor","props","state","role","filesPreview","filesToBeSent","draweropen","printcount","printingmessage","printButtonDisabled","componentWillMount","setState","handleCloseClick","event","index","splice","i","push","name","onDrop","acceptedFiles","rejectedFiles","length","top","alert","handleClick","self","filesArray","req","post","attach","end","err","res","console","log","toggleDrawer","handleDivClick","handleLogout","loginPage","appContext","dashboardScreen","render","files","style","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n/*\nScreen:LoginScreen\nLoginscreen is the main screen which the user is shown on first visit to page and after\nhitting logout\n*/\nimport LoginScreen from './loginscreen';\n/*\nModule:Material-UI\nMaterial-UI is used for designing ui of the app\n*/\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\n/*import Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport AppBar from 'material-ui/AppBar';\n*/\nimport FontIcon from 'material-ui/FontIcon';\nimport {blue500, red500, greenA200} from 'material-ui/styles/colors';\nimport Dropzone from 'react-dropzone';\n\nvar apiBaseUrl = \"https://random-acts0519.herokuapp.com/\";\n/*\nModule:Dropzone\nDropzone is used for local file selection\n*/\n\n/*\nModule:superagent\nsuperagent is used to handle post/get requests to server\n*/\nvar request = require('superagent');\n\nclass DashboardScreen extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      role:'student',\n      filesPreview:[],\n      filesToBeSent:[],\n      draweropen:false,\n      printcount:10,\n      printingmessage:'',\n      printButtonDisabled:false\n    }\n  }\n  componentWillMount(){\n    // console.log(\"prop values\",this.props.role);\n    var printcount;\n    //set upload limit based on user role\n    if(this.props.role){\n      if(this.props.role == 'student'){\n        printcount = 5;\n      }\n      else if(this.props.role == 'teacher'){\n        printcount =10;\n      }\n    }\n    this.setState({printcount,role:this.props.role});\n  }\n  /*\n  Function:handleCloseClick\n  Parameters: event,index\n  Usage:This fxn is used to remove file from filesPreview div\n  if user clicks close icon adjacent to selected file\n  */ \n  handleCloseClick(event,index){\n    // console.log(\"filename\",index);\n    var filesToBeSent=this.state.filesToBeSent;\n    filesToBeSent.splice(index,1);\n    // console.log(\"files\",filesToBeSent);\n    var filesPreview=[];\n    for(var i in filesToBeSent){\n      filesPreview.push(<div>\n        {filesToBeSent[i][0].name}\n        <MuiThemeProvider>\n        <a href=\"#\"><FontIcon\n          className=\"material-icons customstyle\"\n          color={blue500}\n          onClick={(event) => this.handleCloseClick(event,i)}\n        >clear</FontIcon></a>\n        </MuiThemeProvider>\n        </div>\n      )\n    }\n    this.setState({filesToBeSent,filesPreview});\n  }\n  /*\n  Function:onDrop\n  Parameters: acceptedFiles, rejectedFiles\n  Usage:This fxn is default event handler of react drop-Dropzone\n  which is modified to update filesPreview div\n  */\n  onDrop(acceptedFiles, rejectedFiles) {\n      // console.log('Accepted files: ', acceptedFiles[0].name);\n      var filesToBeSent=this.state.filesToBeSent;\n      if(filesToBeSent.length < this.state.printcount){\n        filesToBeSent.push(acceptedFiles);\n        var filesPreview=[];\n        for(var i in filesToBeSent){\n          filesPreview.push(<div>\n            {filesToBeSent[i][0].name}\n            <MuiThemeProvider>\n            <a href=\"#\"><FontIcon\n              className=\"material-icons customstyle\"\n              color={blue500}\n              styles={{ top:10,}}\n              onClick={(event) => this.handleCloseClick(event,i)}\n            >clear</FontIcon></a>\n            </MuiThemeProvider>\n            </div>\n          )\n        }\n        this.setState({filesToBeSent,filesPreview});\n      }\n      else{\n        alert(\"You have reached the limit of printing files at a time\")\n      }\n\n      // console.log('Rejected files: ', rejectedFiles);\n}\n/*\n  Function:handleClick\n  Parameters: event\n  Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\n  to backend\n*/\nhandleClick(event){\n  // console.log(\"handleClick\",event);\n  this.setState({printingmessage:\"Please wait until your files are being printed\",printButtonDisabled:true})\n  var self = this;\n  if(this.state.filesToBeSent.length>0){\n    var filesArray = this.state.filesToBeSent;\n    var req = request.post(apiBaseUrl+'fileprint');\n    for(var i in filesArray){\n        // console.log(\"files\",filesArray[i][0]);\n        req.attach(filesArray[i][0].name,filesArray[i][0])\n    }\n    req.end(function(err,res){\n      if(err){\n        console.log(\"error ocurred\");\n      }\n      console.log(\"res\",res);\n      self.setState({printingmessage:'',printButtonDisabled:false,filesToBeSent:[],filesPreview:[]});\n      alert(\"File printing completed\")\n      // self.props.indexthis.switchPage();\n    });\n  }\n  else{\n    alert(\"Please upload some files first\");\n  }\n}\n/*\n  Function:toggleDrawer\n  Parameters: event\n  Usage:This fxn is used to toggle drawer state\n  */\ntoggleDrawer(event){\n  // console.log(\"drawer click\");\n  this.setState({draweropen: !this.state.draweropen})\n}\n/*\n  Function:toggleDrawer\n  Parameters: event\n  Usage:This fxn is used to close the drawer when user clicks anywhere on the \n  main div\n  */\nhandleDivClick(event){\n  // console.log(\"event\",event);\n  if(this.state.draweropen){\n    this.setState({draweropen:false})\n  }\n}\n/*\n  Function:handleLogout\n  Parameters: event\n  Usage:This fxn is used to end user session and redirect the user back to login page\n  */\nhandleLogout(event){\n  // console.log(\"logout event fired\",this.props);\n  var loginPage =[];\n  loginPage.push(<LoginScreen appContext={this.props.appContext}/>);\n  this.props.appContext.setState({loginPage:loginPage,dashboardScreen:[]})\n}\n  render() {\n    return (\n      <div className=\"App\">\n          <div onClick={(event) => this.handleDivClick(event)}>\n          <center>\n          <div>\n            You can print upto {this.state.printcount} files at a time since you are {this.state.role}\n          </div>\n\n          <Dropzone onDrop={(files) => this.onDrop(files)}>\n                <div>Try dropping some files here, or click to select files to upload.</div>\n          </Dropzone>\n          <div>\n          Files to be printed are:\n          {this.state.filesPreview}\n          </div>\n          </center>\n          <div>\n          {this.state.printingmessage}\n          </div>\n      <MuiThemeProvider>\n           <RaisedButton disabled={this.state.printButtonDisabled} label=\"Print Files\" primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\n      </MuiThemeProvider>\n          </div>\n          </div>\n    );\n  }\n}\n\nconst style = {\n  margin: 15,\n};\n\nexport default DashboardScreen;"]},"metadata":{},"sourceType":"module"}